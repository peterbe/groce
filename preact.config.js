import { resolve } from "path";

import envVars from "preact-cli-plugin-env-vars";

export default {
  /**
   * Function that mutates the original webpack config.
   * Supports asynchronous changes when a promise is returned (or it's an async function).
   *
   * @param {object} config - original webpack config.
   * @param {object} env - options passed to the CLI.
   * @param {WebpackConfigHelpers} helpers - object with useful helpers for working with the webpack config.
   * @param {object} options - this is mainly relevant for plugins (will always be empty in the config), default to an empty object
   **/
  webpack(config, env, helpers, options) {
    // So that stuff in .env becomes available
    envVars(config, env, helpers);

    config.module.rules[4].use.splice(1, 0, {
      loader: "@teamsupercell/typings-for-css-modules-loader",
      options: {
        banner:
          "// This file is automatically generated from your CSS. Any edits will be overwritten.",
        disableLocalsExport: true,
      },
    });

    // Origins of this is @developit helping me solve this problem:
    // https://github.com/firebase/firebase-js-sdk/issues/5492
    const { rule } = helpers.getLoadersByName(config, "babel-loader")[0];
    const babelConfig = rule.options;
    const index = babelConfig.plugins.findIndex((x) => {
      if (Array.isArray(x)) {
        return /fast-async/.test(x[0]);
      }
      if (typeof x === "string") {
        return /fast-async/.test(x);
      }
      console.warn(`Not sure how to deal with type ${typeof x} (${x})`);
      return false;
    });
    if (index !== -1) {
      // console.debug("Removing babelConfig", babelConfig.plugins[index]);
      babelConfig.plugins.splice(index, 1);
    }

    // // Use any `index` file, not just index.js
    // config.resolve.alias["preact-cli-entrypoint"] = resolve(
    //   process.cwd(),
    //   "src",
    //   "index"
    // );
  },
};
